#!venv/bin/python
import config
from state import GlobalState

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Bot, types, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext, filters
from aiogram.utils import executor

storage = MemoryStorage()

TG_TOKEN = config.TOKEN

bot = Bot(token=TG_TOKEN)
dp = Dispatcher(bot, storage=storage)
TELEGRAM_SUPPORT_CHAT_ID = config.TELEGRAM_SUPPORT_CHAT_ID


# @dp.message_handler(commands='start', state=None)
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n'
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.\n'
        '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n'
        '–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤.'
    )
    await state.set_state(GlobalState.forward)


async def forward_to_chat(message: types.Message, state: FSMContext):
    mes = (
        '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        f'user_id: {message.from_user.id}\n'
        f'name: {message.from_user.first_name} {message.from_user.last_name}\n'
        f'username: {message.from_user.username}'
    )
    await bot.send_message(chat_id=TELEGRAM_SUPPORT_CHAT_ID, text=mes)
    await bot.copy_message(
            message_id=message.message_id,
            chat_id=TELEGRAM_SUPPORT_CHAT_ID,
            from_chat_id=message.chat.id,
            reply_markup=InlineKeyboardMarkup(row_width=5).add(
                InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å üôã‚Äç‚ôÇÔ∏è', callback_data=f'answer:{message.chat.id}'))
        )
    async with state.proxy() as data:
        data['client_id'] = message.from_user.id
    await message.answer(
        '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—à —á–∞—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.‚úÖ\n\n'
        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å - –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ üîΩ'
    )



async def what_admin(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['admin_id'] = call.from_user.id
        data['client_id'] = call.data.split(':')[-1]
    await call.message.answer(f'üë®‚Äçüíª –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.username}')
    try:
        await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(row_width=5).add(
                        InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ ü§∑‚Äç‚ôÇÔ∏è', callback_data=f'answer:{data["client_id"]}')))
    except:
        print(1)
    await state.set_state(GlobalState.wait_admin_ans)


async def wait_admin_ans(message: types.Message, state: FSMContext):
    print(message.text)
    async with state.proxy() as data:
        await bot.copy_message(
            message_id=message.message_id,
            chat_id=data['client_id'],
            from_chat_id=message.chat.id,
        )
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ')
    await state.finish()


dp.register_message_handler(start, filters.ChatTypeFilter(chat_type=['private',]), state=None)
dp.register_message_handler(forward_to_chat, content_types=[
    types.ContentType.ANY
], state=GlobalState.forward)
dp.register_callback_query_handler(what_admin, text_contains='answer:', state='*')
dp.register_message_handler(
    wait_admin_ans, filters.IDFilter(chat_id=TELEGRAM_SUPPORT_CHAT_ID), state=GlobalState.wait_admin_ans,
    content_types=[types.ContentType.ANY]
)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)